// <auto-generated />
using System;
using BookApp.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookApp.Data.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20240727130552_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookApp.Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "Jane Austen",
                            WebUrl = "https://www.janeausten.org/"
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "William Shakespeare",
                            WebUrl = "https://www.shakespeare.org.uk/"
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "Charles Dickens",
                            WebUrl = "https://www.charlesdickensmuseum.com/"
                        },
                        new
                        {
                            AuthorId = 4,
                            Name = "J.R.R. Tolkien",
                            WebUrl = "https://www.tolkiensociety.org/"
                        },
                        new
                        {
                            AuthorId = 5,
                            Name = "Mark Twain",
                            WebUrl = "https://www.marktwainhouse.org/"
                        },
                        new
                        {
                            AuthorId = 6,
                            Name = "Leo Tolstoy",
                            WebUrl = "https://www.tolstoy.ru/en/"
                        },
                        new
                        {
                            AuthorId = 7,
                            Name = "F. Scott Fitzgerald",
                            WebUrl = "https://www.fscottfitzgerald.org/"
                        },
                        new
                        {
                            AuthorId = 8,
                            Name = "Ernest Hemingway",
                            WebUrl = "https://www.ernesthemingwayhome.com/"
                        },
                        new
                        {
                            AuthorId = 9,
                            Name = "John Steinbeck",
                            WebUrl = "https://www.johnsteinbeck.org/"
                        },
                        new
                        {
                            AuthorId = 10,
                            Name = "Mary Shelley",
                            WebUrl = "https://www.maryshelley.org/"
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("BookId");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Available = true,
                            Description = "A guide to writing clean and maintainable code",
                            ISBN = "978-0134685991",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/41v0QiEwZ7L._SX397_BO1,204,203,200_.jpg",
                            Price = 40.99f,
                            PublishedOn = new DateTime(2008, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Prentice Hall",
                            Title = "Clean Code: A Handbook of Agile Software Craftsmanship"
                        },
                        new
                        {
                            BookId = 2,
                            Available = true,
                            Description = "A guide to becoming a better programmer",
                            ISBN = "978-0201616224",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/41yczzw6U0L._SX331_BO1,204,203,200_.jpg",
                            Price = 35.99f,
                            PublishedOn = new DateTime(1999, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Addison-Wesley Professional",
                            Title = "The Pragmatic Programmer: From Journeyman to Master"
                        },
                        new
                        {
                            BookId = 3,
                            Available = true,
                            Description = "A guide to preparing for technical interviews",
                            ISBN = "978-0984782857",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/41rNjZBm3sL._SX331_BO1,204,203,200_.jpg",
                            Price = 33.99f,
                            PublishedOn = new DateTime(2015, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "CareerCup",
                            Title = "Cracking the Coding Interview: 189 Programming Questions and Solutions"
                        },
                        new
                        {
                            BookId = 4,
                            Available = true,
                            Description = "Design Patterns is a modern classic in the literature of object-oriented development, offering timeless and elegant solutions to common problems in software design. It describes patterns for managing object creation, composing objects into larger structures, and coordinating control flow between objects.",
                            ISBN = "978-0201633610",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/4124eHhdGDL._SX396_BO1,204,203,200_.jpg",
                            Price = 45.99f,
                            PublishedOn = new DateTime(1995, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Addison-Wesley Professional",
                            Title = "Design Patterns: Elements of Reusable Object-Oriented Software"
                        },
                        new
                        {
                            BookId = 5,
                            Available = true,
                            Description = "A guide to software construction principles and practices",
                            ISBN = "978-0735619670",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/41yI1Gzv1aL._SX400_BO1,204,203,200_.jpg",
                            Price = 50.99f,
                            PublishedOn = new DateTime(2004, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Microsoft Press",
                            Title = "Code Complete: A Practical Handbook of Software Construction"
                        },
                        new
                        {
                            BookId = 6,
                            Available = false,
                            Description = "A guide to best practices for the Java programming language",
                            ISBN = "978-0321356680",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/",
                            Price = 35.99f,
                            PublishedOn = new DateTime(2008, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Addison-Wesley Professional",
                            Title = "Effective Java"
                        },
                        new
                        {
                            BookId = 7,
                            Available = true,
                            Description = "This book provides a developer-level introduction along with more advanced and useful features of JavaScript. It covers concepts such as objects, functions, and arrays, and it examines features such as closures, inheritance, and automatic semicolon insertion.",
                            ISBN = "978-0596517748",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/51e6YZU6bxL._SX379_BO1,204,203,200_.jpg",
                            Price = 25.99f,
                            PublishedOn = new DateTime(2008, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "O'Reilly Media",
                            Title = "JavaScript: The Good Parts"
                        },
                        new
                        {
                            BookId = 8,
                            Available = true,
                            Description = "A comprehensive introduction to algorithms and data structures",
                            ISBN = "978-0262033848",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/51jJOuP--mL._SX398_BO1,204,203,200_.jpg",
                            Price = 60.99f,
                            PublishedOn = new DateTime(2009, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "MIT Press",
                            Title = "Introduction to Algorithms"
                        },
                        new
                        {
                            BookId = 9,
                            Available = true,
                            Description = "A comprehensive guide to computer programming",
                            ISBN = "978-0134685992",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/51X5rQQ8-3L._SX405_BO1,204,203,200_.jpg",
                            Price = 80.99f,
                            PublishedOn = new DateTime(1968, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Addison-Wesley Professional",
                            Title = "The Art of Computer Programming"
                        },
                        new
                        {
                            BookId = 10,
                            Available = true,
                            Description = "Essays on software engineering and project management",
                            ISBN = "978-0201835953",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/51OX1rsYvAL._SX331_BO1,204,203,200_.jpg",
                            Price = 20.99f,
                            PublishedOn = new DateTime(1995, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Addison-Wesley Professional",
                            Title = "The Mythical Man-Month: Essays on Software Engineering"
                        },
                        new
                        {
                            BookId = 11,
                            Available = true,
                            Description = "A guide to compiler design principles and techniques",
                            ISBN = "978-0321486813",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/51KQc%2B9yJHL._SX379_BO1,204,203,200_.jpg",
                            Price = 70.99f,
                            PublishedOn = new DateTime(2006, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Addison-Wesley Professional",
                            Title = "Compilers: Principles, Techniques, and Tools"
                        },
                        new
                        {
                            BookId = 12,
                            Available = true,
                            Description = "A classic introduction to the C programming language",
                            ISBN = "978-0131103627",
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/51IS6N8BHPL._SX379_BO1,204,203,200_.jpg",
                            Price = 30.99f,
                            PublishedOn = new DateTime(1988, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Prentice Hall",
                            Title = "The C Programming Language"
                        },
                        new
                        {
                            BookId = 13,
                            Available = true,
                            Description = "Big Data is a book that examines how data-driven technologies are transforming the way we live and work, and how they are creating new opportunities for individuals and organizations to generate value. It also looks at the risks and challenges of data-driven technologies, and how they can be managed.",
                            ISBN = "978-1491903996",
                            Price = 24.99f,
                            PublishedOn = new DateTime(2013, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "O'Reilly Media",
                            Title = "Big Data: A Revolution That Will Transform How We Live, Work, and Think"
                        },
                        new
                        {
                            BookId = 14,
                            Available = true,
                            Description = "Python for Data Science Handbook is a comprehensive introduction to the Python programming language, and its use in data science. It covers the essential tools for data science, including NumPy, Pandas, Matplotlib, and Scikit-learn, and also covers advanced topics such as machine learning and natural language processing.",
                            ISBN = "978-1119293347",
                            Price = 39.99f,
                            PublishedOn = new DateTime(2015, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Wiley",
                            Title = "Python for Data Science Handbook"
                        },
                        new
                        {
                            BookId = 15,
                            Available = true,
                            Description = "Designing Data-Intensive Applications is a book that examines the principles and practices behind data-intensive systems. It covers topics such as data modeling, data storage, data processing, and data flow, and provides guidance on how to design and implement data-intensive systems that are reliable, scalable, and maintainable.",
                            ISBN = "978-1449373320",
                            Price = 49.99f,
                            PublishedOn = new DateTime(2017, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "O'Reilly Media",
                            Title = "Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems"
                        },
                        new
                        {
                            BookId = 16,
                            Available = true,
                            Description = "Cloud Native Infrastructure is a book that describes patterns for building infrastructure that is designed to run in the cloud. It covers topics such as containerization, service discovery, load balancing, and auto-scaling, and provides guidance on how to build infrastructure that is scalable, reliable, and easy to operate.",
                            ISBN = "978-1492041502",
                            Price = 49.99f,
                            PublishedOn = new DateTime(2019, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "O'Reilly Media",
                            Title = "Cloud Native Infrastructure: Patterns for Scalable, Reliable Services"
                        },
                        new
                        {
                            BookId = 17,
                            Available = true,
                            Description = "Artificial Intelligence with Python is a book that provides an introduction to the field of artificial intelligence, and its use in Python. It covers the basics of AI, including supervised and unsupervised learning, and also covers advanced topics such as deep learning and natural language processing.",
                            ISBN = "978-1119550822",
                            Price = 39.99f,
                            PublishedOn = new DateTime(2018, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Wiley",
                            Title = "Artificial Intelligence with Python"
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 4,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 8,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 9,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 9,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 10,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 7,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 13,
                            AuthorId = 7,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 14,
                            AuthorId = 9,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 15,
                            AuthorId = 10,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 16,
                            AuthorId = 3,
                            Order = (byte)0
                        },
                        new
                        {
                            BookId = 17,
                            AuthorId = 2,
                            Order = (byte)0
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.BookCustomer", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookCustomer");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            BookId = 2,
                            CustomerId = 2
                        },
                        new
                        {
                            BookId = 3,
                            CustomerId = 3
                        },
                        new
                        {
                            BookId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            BookId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            BookId = 6,
                            CustomerId = 6
                        },
                        new
                        {
                            BookId = 7,
                            CustomerId = 7
                        },
                        new
                        {
                            BookId = 8,
                            CustomerId = 8
                        },
                        new
                        {
                            BookId = 9,
                            CustomerId = 9
                        },
                        new
                        {
                            BookId = 10,
                            CustomerId = 10
                        },
                        new
                        {
                            BookId = 11,
                            CustomerId = 10
                        },
                        new
                        {
                            BookId = 12,
                            CustomerId = 1
                        },
                        new
                        {
                            BookId = 13,
                            CustomerId = 2
                        },
                        new
                        {
                            BookId = 14,
                            CustomerId = 2
                        },
                        new
                        {
                            BookId = 15,
                            CustomerId = 4
                        },
                        new
                        {
                            BookId = 16,
                            CustomerId = 5
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.BookTag", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTag");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            TagId = 1
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 2
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 3
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 3
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 4
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 5
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 6
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 7
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 8
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 2
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 9
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 10
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 3
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 5
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 11
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 12
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 3
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 13
                        },
                        new
                        {
                            BookId = 7,
                            TagId = 13
                        },
                        new
                        {
                            BookId = 7,
                            TagId = 14
                        },
                        new
                        {
                            BookId = 7,
                            TagId = 15
                        },
                        new
                        {
                            BookId = 8,
                            TagId = 1
                        },
                        new
                        {
                            BookId = 8,
                            TagId = 2
                        },
                        new
                        {
                            BookId = 8,
                            TagId = 10
                        },
                        new
                        {
                            BookId = 9,
                            TagId = 3
                        },
                        new
                        {
                            BookId = 9,
                            TagId = 5
                        },
                        new
                        {
                            BookId = 9,
                            TagId = 16
                        },
                        new
                        {
                            BookId = 10,
                            TagId = 3
                        },
                        new
                        {
                            BookId = 10,
                            TagId = 17
                        },
                        new
                        {
                            BookId = 10,
                            TagId = 18
                        },
                        new
                        {
                            BookId = 11,
                            TagId = 2
                        },
                        new
                        {
                            BookId = 11,
                            TagId = 9
                        },
                        new
                        {
                            BookId = 11,
                            TagId = 16
                        },
                        new
                        {
                            BookId = 12,
                            TagId = 6
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]", true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            FirstName = "John",
                            LastName = "Smith"
                        },
                        new
                        {
                            CustomerId = 2,
                            FirstName = "Jane",
                            LastName = "Doe"
                        },
                        new
                        {
                            CustomerId = 3,
                            FirstName = "Bob",
                            LastName = "Johnson"
                        },
                        new
                        {
                            CustomerId = 4,
                            FirstName = "Sally",
                            LastName = " Smith"
                        },
                        new
                        {
                            CustomerId = 5,
                            FirstName = "Samuel",
                            LastName = " Jackson"
                        },
                        new
                        {
                            CustomerId = 6,
                            FirstName = "Emily",
                            LastName = " Williams"
                        },
                        new
                        {
                            CustomerId = 7,
                            FirstName = "David",
                            LastName = " Anderson"
                        },
                        new
                        {
                            CustomerId = 8,
                            FirstName = "Rachel",
                            LastName = "Davis"
                        },
                        new
                        {
                            CustomerId = 9,
                            FirstName = "Mark",
                            LastName = "Thompson"
                        },
                        new
                        {
                            CustomerId = 10,
                            FirstName = "Adam",
                            LastName = "Walker"
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<double>("BookPrice")
                        .HasColumnType("float");

                    b.Property<short>("NumBooks")
                        .HasColumnType("smallint");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            BookId = 1,
                            BookPrice = 36.890998840332031,
                            NumBooks = (short)1,
                            OrderId = 1
                        },
                        new
                        {
                            ItemId = 2,
                            BookId = 2,
                            BookPrice = 28.792001724243164,
                            NumBooks = (short)1,
                            OrderId = 1
                        },
                        new
                        {
                            ItemId = 3,
                            BookId = 6,
                            BookPrice = 26.992500305175781,
                            NumBooks = (short)1,
                            OrderId = 3
                        },
                        new
                        {
                            ItemId = 4,
                            BookId = 11,
                            BookPrice = 53.242500305175781,
                            NumBooks = (short)1,
                            OrderId = 4
                        },
                        new
                        {
                            ItemId = 5,
                            BookId = 16,
                            BookPrice = 49.990001678466797,
                            NumBooks = (short)1,
                            OrderId = 5
                        },
                        new
                        {
                            ItemId = 6,
                            BookId = 1,
                            BookPrice = 36.890998840332031,
                            NumBooks = (short)2,
                            OrderId = 5
                        },
                        new
                        {
                            ItemId = 7,
                            BookId = 5,
                            BookPrice = 30.594001770019531,
                            NumBooks = (short)1,
                            OrderId = 6
                        },
                        new
                        {
                            ItemId = 8,
                            BookId = 6,
                            BookPrice = 26.992500305175781,
                            NumBooks = (short)1,
                            OrderId = 6
                        },
                        new
                        {
                            ItemId = 9,
                            BookId = 7,
                            BookPrice = 25.989999771118164,
                            NumBooks = (short)1,
                            OrderId = 6
                        },
                        new
                        {
                            ItemId = 10,
                            BookId = 8,
                            BookPrice = 30.495000839233398,
                            NumBooks = (short)2,
                            OrderId = 7
                        },
                        new
                        {
                            ItemId = 11,
                            BookId = 9,
                            BookPrice = 60.742500305175781,
                            NumBooks = (short)1,
                            OrderId = 7
                        },
                        new
                        {
                            ItemId = 12,
                            BookId = 10,
                            BookPrice = 15.742500305175781,
                            NumBooks = (short)1,
                            OrderId = 7
                        },
                        new
                        {
                            ItemId = 13,
                            BookId = 11,
                            BookPrice = 53.242500305175781,
                            NumBooks = (short)1,
                            OrderId = 8
                        },
                        new
                        {
                            ItemId = 14,
                            BookId = 12,
                            BookPrice = 23.242500305175781,
                            NumBooks = (short)1,
                            OrderId = 9
                        },
                        new
                        {
                            ItemId = 15,
                            BookId = 13,
                            BookPrice = 24.989999771118164,
                            NumBooks = (short)2,
                            OrderId = 10
                        },
                        new
                        {
                            ItemId = 16,
                            BookId = 17,
                            BookPrice = 39.990001678466797,
                            NumBooks = (short)1,
                            OrderId = 2
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("dbo.TotalOrderPrice([OrderId])");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 1,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 2,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 4,
                            CustomerId = 3,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 5,
                            CustomerId = 4,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 6,
                            CustomerId = 5,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 7,
                            CustomerId = 6,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 8,
                            CustomerId = 6,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 9,
                            CustomerId = 8,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        },
                        new
                        {
                            OrderId = 10,
                            CustomerId = 10,
                            OrderedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0.0
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.PriceOffer", b =>
                {
                    b.Property<int>("PriceOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceOfferId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<float>("NewPrice")
                        .HasColumnType("real");

                    b.Property<string>("PromotionalText")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("PriceOfferId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("PriceOffers");

                    b.HasData(
                        new
                        {
                            PriceOfferId = 1,
                            BookId = 1,
                            NewPrice = 36.891f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 2,
                            BookId = 2,
                            NewPrice = 28.792002f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 3,
                            BookId = 3,
                            NewPrice = 25.4925f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 4,
                            BookId = 4,
                            NewPrice = 56.9925f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 5,
                            BookId = 5,
                            NewPrice = 30.594002f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 6,
                            BookId = 6,
                            NewPrice = 26.9925f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 7,
                            BookId = 8,
                            NewPrice = 30.495f,
                            PromotionalText = "Special Offer!"
                        },
                        new
                        {
                            PriceOfferId = 8,
                            BookId = 9,
                            NewPrice = 60.7425f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 9,
                            BookId = 10,
                            NewPrice = 15.7425f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 10,
                            BookId = 11,
                            NewPrice = 53.2425f,
                            PromotionalText = "Xmas Season Offer!"
                        },
                        new
                        {
                            PriceOfferId = 11,
                            BookId = 12,
                            NewPrice = 23.2425f,
                            PromotionalText = "Xmas Season Offer!"
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("NumStars")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            BookId = 1,
                            Comment = "Great book, easy to understand.",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            NumStars = 5
                        },
                        new
                        {
                            ReviewId = 2,
                            BookId = 2,
                            Comment = "Good information but could be more in-depth.",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            NumStars = 4
                        },
                        new
                        {
                            ReviewId = 3,
                            BookId = 3,
                            Comment = "Informative but could be more engaging",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 3,
                            NumStars = 3
                        },
                        new
                        {
                            ReviewId = 4,
                            BookId = 4,
                            Comment = "Too basic for my needs",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 4,
                            NumStars = 2
                        },
                        new
                        {
                            ReviewId = 5,
                            BookId = 5,
                            Comment = "Excellent resource for data science",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 5,
                            NumStars = 5
                        },
                        new
                        {
                            ReviewId = 6,
                            BookId = 6,
                            Comment = "Poorly written, not useful",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 6,
                            NumStars = 1
                        },
                        new
                        {
                            ReviewId = 7,
                            BookId = 17,
                            Comment = "Good introduction to AI",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 7,
                            NumStars = 4
                        },
                        new
                        {
                            ReviewId = 8,
                            BookId = 8,
                            Comment = "Some good insights, but could be more comprehensive",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 8,
                            NumStars = 3
                        },
                        new
                        {
                            ReviewId = 9,
                            BookId = 1,
                            Comment = "I love this book!",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 9,
                            NumStars = 5
                        },
                        new
                        {
                            ReviewId = 10,
                            BookId = 7,
                            Comment = "Helpful guide for beginners",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            NumStars = 4
                        },
                        new
                        {
                            ReviewId = 11,
                            BookId = 15,
                            Comment = "Disappointing, not what I was expecting",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            NumStars = 2
                        },
                        new
                        {
                            ReviewId = 12,
                            BookId = 17,
                            Comment = "Great book, easy to understand",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 4,
                            NumStars = 5
                        },
                        new
                        {
                            ReviewId = 13,
                            BookId = 8,
                            Comment = "Good read, helpful examples",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 5,
                            NumStars = 4
                        },
                        new
                        {
                            ReviewId = 14,
                            BookId = 10,
                            Comment = "Informative but could be more engaging",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 6,
                            NumStars = 3
                        },
                        new
                        {
                            ReviewId = 15,
                            BookId = 9,
                            Comment = "Too basic for my needs",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 7,
                            NumStars = 2
                        },
                        new
                        {
                            ReviewId = 16,
                            BookId = 10,
                            Comment = "Poorly written, not useful",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 8,
                            NumStars = 1
                        },
                        new
                        {
                            ReviewId = 17,
                            BookId = 16,
                            Comment = "Good introduction to Cloud Native Infrastructure",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 9,
                            NumStars = 4
                        },
                        new
                        {
                            ReviewId = 18,
                            BookId = 12,
                            Comment = "Informative but could be more comprehensive",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            NumStars = 3
                        },
                        new
                        {
                            ReviewId = 19,
                            BookId = 13,
                            Comment = "Disappointing, not what I was expecting",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            NumStars = 2
                        },
                        new
                        {
                            ReviewId = 20,
                            BookId = 14,
                            Comment = "Excellent resource for data science",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 3,
                            NumStars = 5
                        },
                        new
                        {
                            ReviewId = 21,
                            BookId = 6,
                            Comment = "Good introduction to Cloud Native Infrastructure",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 4,
                            NumStars = 4
                        },
                        new
                        {
                            ReviewId = 22,
                            BookId = 7,
                            Comment = "Informative but could be more comprehensive",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 5,
                            NumStars = 4
                        },
                        new
                        {
                            ReviewId = 23,
                            BookId = 8,
                            Comment = "Disappointing, not what I was expecting",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 6,
                            NumStars = 2
                        },
                        new
                        {
                            ReviewId = 24,
                            BookId = 5,
                            Comment = "Excellent resource for data science",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 7,
                            NumStars = 5
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Agile"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Algorithms"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Best Practices"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Career Advancement"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "Clean Code"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "Computer Programming"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Computer Science"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Compiler Design"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "C Programming"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Data Structures"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Design Patterns"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Java"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "JavaScript"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "Job Preparation"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "Object-Oriented Design"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Programming Language"
                        },
                        new
                        {
                            TagId = 17,
                            TagName = "Programming Languages"
                        },
                        new
                        {
                            TagId = 18,
                            TagName = "Project Management"
                        },
                        new
                        {
                            TagId = 19,
                            TagName = "Software Construction"
                        },
                        new
                        {
                            TagId = 20,
                            TagName = "Software Design"
                        },
                        new
                        {
                            TagId = 21,
                            TagName = "Software Development"
                        },
                        new
                        {
                            TagId = 22,
                            TagName = "Software Development Process"
                        },
                        new
                        {
                            TagId = 23,
                            TagName = "Software Engineering"
                        },
                        new
                        {
                            TagId = 24,
                            TagName = "Technical Interviews"
                        },
                        new
                        {
                            TagId = 25,
                            TagName = "Web Development"
                        });
                });

            modelBuilder.Entity("BookApp.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookApp.Domain.Entities.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.BookCustomer", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Book", "Book")
                        .WithMany("WishList")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookApp.Domain.Entities.Customer", "Customer")
                        .WithMany("WishList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.BookTag", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Book", "Book")
                        .WithMany("Tags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookApp.Domain.Entities.Tag", "Tag")
                        .WithMany("Books")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Item", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookApp.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Order", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.OrderStatus", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Order", "Order")
                        .WithMany("Statuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.PriceOffer", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Book", "Book")
                        .WithOne("Promotion")
                        .HasForeignKey("BookApp.Domain.Entities.PriceOffer", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Review", b =>
                {
                    b.HasOne("BookApp.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookApp.Domain.Entities.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Promotion");

                    b.Navigation("Reviews");

                    b.Navigation("Tags");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("BookApp.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
